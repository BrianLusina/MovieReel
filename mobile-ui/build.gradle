apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'
apply plugin: "io.fabric"
apply plugin: "signing"
apply from: "../jacoco.gradle"
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.triplet.play'
apply plugin: 'org.jetbrains.dokka-android'

import com.android.build.OutputFile

/**
 * Gets the release track to use for deployment
 * Release tracks are either "alpha", "beta", "production", "rollout"
 * */
def getReleaseTrack = { ->
    try{
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return Integer.parseInt(properties.getProperty("RELEASE_TRACK"))
    }catch (ignored){
        return "beta"
    }
}

/**
 * Get Fabric API key to load into manifest file
 * */
def getFabricKey = { ->
    try{
        Properties properties = new Properties()
        properties.load(new FileInputStream(("gradle.properties")))
        return properties.getProperty("FABRIC_KEY")
    }catch (ignored){
        return ""
    }
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = rootProject.ext.serviceAccountEmail
            jsonFile = rootProject.ext.pJsonKeyFile
        }
    }

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]
    defaultConfig {
        applicationId "com.moviereel"
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

        versionCode globalConfiguration["versionCode"]
        versionName globalConfiguration["versionName"]

        multiDexEnabled = true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // manifestPlaceholders = [fabricApiKey: getFabricKey()]
        resValue "string", "fabricApiKey", getFabricKey()
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }

    dataBinding {
        enabled = false
    }

    productFlavors {

    }
    /**
     * The aapt tool may inflate PNG files that have already been compressed.
     * To prevent this, you can use the cruncherEnabled flag in Gradle to disable this
     * process for PNG files:
     * */
    aaptOptions {
        cruncherEnabled = false
    }

    splits {
        abi {
            // Enables building multiple APKs per ABI.
            enable rootProject.ext.enableSeparateBuildPerCPUArchitecture
            universalApk rootProject.ext.enableUniversalApk

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi", "armeabi-v7a", "arm64-v8a", "mips", "x86", "x86_64"
        }
    }

    signingConfigs {
        release {
            keyAlias rootProject.ext.keystoreProperties['keyAlias']
            keyPassword rootProject.ext.keystoreProperties['keyPassword']
            storeFile rootProject.file(rootProject.ext.keystoreProperties['storeFile'])
            storePassword rootProject.ext.keystoreProperties['storePassword']
        }
    }

    // configurations for deployment
    play {
        track = getReleaseTrack()
        untrackOld = true // will untrack 'alpha' while upload to 'beta'
        errorOnSizeLimit = false
        uploadImages = true
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            resValue "string", "app_name", "Movie Reel"
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            applicationIdSuffix ".debug"
            testCoverageEnabled true
            resValue "string", "app_name", "Movie Reel-Dev"
            resValue("string", "PORT_NUMBER", "8081")
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    buildTypes.each {
        it.buildConfigField "String", "MOVIE_DB_KEY", MovieDbKey
        it.buildConfigField "String", "IMAGE_BASE_URL", IMAGE_BASE_URL
        it.buildConfigField "String", "IMAGE_SECURE_BASE_URL", IMAGE_SECURE_BASE_URL
        it.buildConfigField "String", "APP_CENTER_KEY", APP_CENTER_KEY
        it.buildConfigField "String", "BASE_URL", "\"https://api.themoviedb.org/3/\""
    }

    packagingOptions {
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/DEPENDENCIES.txt"
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/dependencies.txt"
        exclude "META-INF/LICENSE"
        exclude "META-INF/license.txt"
        exclude "META-INF/LGPL2.1"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/NOTICE"
        exclude "META-INF/notice.txt"
    }

    configurations.all {
        resolutionStrategy {
            force "com.android.support:support-annotations:" + rootProject.ext.supportLibVersion
        }
    }

    // this enables the modularizing of application resources
    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin"
            res.srcDirs = [
                    "src/main/res/layouts/feature_main",
                    "src/main/res/layouts/feature_movie",
                    "src/main/res/layouts/feature_series",
                    "src/main/res/layouts/feature_cast",
                    "src/main/res/layouts/feature_review",
                    "src/main/res/layouts/feature_splash",
                    "src/main/res/layouts/feature_error",
                    "src/main/res/layouts/feature_details",
                    "src/main/res/layouts/components",
                    "src/main/res/layouts/common",
                    "src/main/res/layouts",
                    "src/main/res"
            ]
        }

        androidTest {
            java.srcDirs += "src/androidTest/kotlin"
        }

        test {
            java.srcDirs += "src/test/kotlin"
        }
    }

    lintOptions {
        quiet true         // set to true to turn off analysis progress reporting by lint
        abortOnError false        // if true, stop the gradle build if errors are found
        ignoreWarnings true        // if true, only report errors
    }

    // For each APK output variant, override versionCode with a combination of
    // ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
    // is equal to defaultConfig.versionCode. If you configure product flavors that
    // define their own versionCode, variant.versionCode uses that value instead.
    // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
    applicationVariants.all { variant ->

        // Assigns a different version code for each output APK
        // other than the universal APK.
        variant.outputs.all { output ->
            // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
            // Determines the ABI for this variant and returns the mapped value.
            def baseAbiVersionCode = rootProject.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
            } else {
                // this will make sure universal apks have the lowest version code
                output.versionCodeOverride = variant.versionCode

                // this is for uploading with Fabric, this will upload the universal APK only
                // since Fabric does not properly handle APK splits
                tasks.findAll {
                    it.name.startsWith("crashlyticsUploadDistribution${variant.name.capitalize()}")
                }.each {
                    it.doFirst {
                        rootProject.ext.betaDistributionApkFilePath = output.outputFile.absolutePath
                    }
                }
            }
        }
    }
}

kapt {
    correctErrorTypes = true
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    def globalDependencies = rootProject.ext.globalDependencies
    def testDependencies = rootProject.ext.testDependencies
    def mobileDependencies = rootProject.ext.mobileUiDependencies
    def mobileTestDependencies = rootProject.ext.mobileUiTestDependencies

    implementation mobileDependencies.androidSupportV4
    implementation mobileDependencies.appCompatV7
    implementation mobileDependencies.cardView
    implementation mobileDependencies.supportDesign
    implementation mobileDependencies.recyclerView
    implementation mobileDependencies.vectorDrawable
    implementation mobileDependencies.supportAnnotations
    implementation mobileDependencies.supportPalleteV7
    implementation mobileDependencies.supportMultidex

    implementation globalDependencies.kotlin

    implementation mobileDependencies.navigationTabStrip
    implementation(mobileDependencies.materialDrawer) {
        transitive = true
    }

    implementation(mobileDependencies.aboutLibraries) {
        transitive = true
        exclude module: "fastadapter"
    }

    implementation mobileDependencies.googleTypeface
    implementation mobileDependencies.fontawesomeTypeface
    implementation mobileDependencies.itemAnimators
    implementation mobileDependencies.glide
    implementation mobileDependencies.circleImageView
    implementation mobileDependencies.sweetalert
    implementation mobileDependencies.appintro
    implementation(globalDependencies.crashlytics) {
        transitive = true
    }
    implementation mobileDependencies.customCrash
    implementation globalDependencies.anko
    implementation globalDependencies.dagger
    compileOnly globalDependencies.javaxAnnotation
    implementation globalDependencies.javaxInject
    kapt globalDependencies.daggerCompiler
    implementation globalDependencies.rxJava
    implementation globalDependencies.rxKotlin
    implementation mobileDependencies.rxAndroid

    androidTestImplementation(mobileTestDependencies.espressoContrib) {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation mobileTestDependencies.espressoCore
    androidTestImplementation mobileTestDependencies.supportTestRunner
    androidTestImplementation mobileTestDependencies.espressoIntents
    androidTestImplementation testDependencies.mockitoCore
    kaptAndroidTest globalDependencies.daggerCompiler

    testImplementation testDependencies.junit
    testImplementation testDependencies.robolectric
    testImplementation testDependencies.assertJ
    testImplementation testDependencies.spekApi
    testImplementation testDependencies.mockitoKotlin
    testImplementation testDependencies.hamcrest
    testImplementation testDependencies.mockitoCore

    kaptTest globalDependencies.daggerCompiler
}