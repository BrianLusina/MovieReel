
/**
 * Gets the service account email gradle.properties file, Ensure that you have a
 * gradle.properties file in root project directory
 * */
def getMovieReelServiceAccountKey = { ->
    try {
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("MOVIE_REEL_SERVICE_ACCOUNT_EMAIL")
    } catch (Exception ignored) {
        return ""
    }
}
/**
 * Get version code from git history
 * This will dynamically increase the version code
 * If it fails to get from git, it will get it from the properties file, ensure that there is a properties
 * file at root of project
 * */
def getVersionCode = { ->
    try{
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-list", "--first-parent", "--count", "origin/master"
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim()) + 1
    }catch (ignored){
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return Integer.parseInt(properties.getProperty("VERSION_CODE"))
    }
}

/**
 * Get version name will ensure that the version name of the application remains unique and ever changing
 * for easier tracking. This will pull the information from git
 * */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe" "--dirty"
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }catch (ignored){
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("VERSION_NAME")
    }
}

ext{
    androidBuildToolsVersion = "27.0.3"
    androidMinSdkVersion = 15
    androidTargetSdkVersion = 27
    androidCompileSdkVersion = 27

    versionCode = getVersionCode()
    versionName = getVersionName()

    keystorePropertiesFile = rootProject.file("keystores/keystore.properties")
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    // configurations to send to Play Store for automated publishing
    pJsonKeyFile = rootProject.file("keystores/moviereel_publish_key.json")
    serviceAccountEmail = getMovieReelServiceAccountKey()

    /**
     * Set this to true to create two separate APKs instead of one:
     *   - An APK that only works on ARM devices
     *   - An APK that only works on x86 devices
     * The advantage is the size of the APK is reduced by about 4MB.
     * Upload all the APKs to the Play Store and people will download
     * the correct one based on the CPU architecture of their device.
     */
    enableSeparateBuildPerCPUArchitecture = true

    // If true, also generate a universal APK
    enableUniversalApk = true

    // ABI codes
    abiCodes = ["armeabi": 3, "armeabi-v7a": 4, "arm64-v8a": 5, "mips": 6, "x86": 7, "x86_64": 8]

    // Libraries
    supportLibVersion = "27.1.1"
    navTabStripVersion = "1.0.4"

    mikepenzMaterialTypeface = "2.2.0.1@aar"
    mikepenzAboutLib = "6.0.8"
    mikepenzMaterialDrawer = "6.0.7@aar"
    mikepenzIconicsCore="3.0.3@aar"
    mikepenzFontAwesome = "5.0.6.0@aar"
    mikepenzOctIcons = ":3.2.0.4@aar"
    mikepenzeItemAnims = "1.0.2@aar"
    crashlyticsVersion = "2.9.1@aar"
    roomVersion = "1.0.0"
    gsonVersion = "2.8.0"
    daggerVersion = "2.15"
    javaxAnnotationVersion="1.0"
    javaxInjectVersion="1"
    rxjava2Version = '2.1.12'
    rxandroidVersion = '2.0.2'
    rxKotlinVersion = "2.2.0"
    retrofitVersion = "2.4.0"
    retrofitAdapterVersion = "2.4.0"
    ankoVersion = "0.10.4"
    evernoteJobVersion = "1.2.5"
    customActivityOnCrashVersion = "2.2.0"
    debugDatabaseVersion = "1.0.3"
    glideVersion = "4.6.1"
    circleImageViewVersion ="2.2.0"
    appIntroVersion = "4.2.3"
    sweetAlertVersion = "1.3"
    appCenterSdkVersion = '1.4.0'

    // test version
    espressoVersion = "3.0.1"
    testRunnerVersion = "1.0.1"
    jUnitVersion = "5.11"
    mockitoKotlinVersion = "1.5.0"
    mockitoVersion = "2.18.0"
    mockWebServerVersion = "3.10.0"
    robolectricVersion = "3.8"
    assertJVersion = "3.8.0"
    spekVersion = "1.1.5"
    hamcrestVersion = "1.3"


}
