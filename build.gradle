buildscript {
    ext.kotlin_version = '1.1.50'
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven {url "https://maven.fabric.io/public"}
    }

    dependencies {
        classpath "io.fabric.tools:gradle:1+"
        classpath 'com.android.tools.build:gradle:3.0.0-beta6'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url "https://maven.fabric.io/public" }
        maven { url "https://jitpack.io" }
        maven { url "http://dl.bintray.com/typesafe/maven-releases" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext{
    keystorePropertiesFile = rootProject.file("keystores/keystore.properties")
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    // configurations to send to Play Store for automated publishing
    pJsonKeyFile = rootProject.file("keystores/moviereel_publish_key.json")
    serviceAccountEmail = getMovieReelServiceAccountKey()

    /**
     * Set this to true to create two separate APKs instead of one:
     *   - An APK that only works on ARM devices
     *   - An APK that only works on x86 devices
     * The advantage is the size of the APK is reduced by about 4MB.
     * Upload all the APKs to the Play Store and people will download
     * the correct one based on the CPU architecture of their device.
     */
    enableSeparateBuildPerCPUArchitecture = true

    // If true, also generate a universal APK
    enableUniversalApk = true

    // ABI codes
    abiCodes = ["armeabi-v7a": 1, "x86": 2, "mips": 3, "x86_64": 4, "armeabi": 5, "arm64-v8a": 6]

    compileSdkVersion = 26
    buildToolsVersion = "26.0.0"
    minSdkVersion = 16
    targetSdkVersion = 26
    versionCode = 1
    versionName = "1.1.0"

    supportLibVersion = "26.1.0"

    // navigation strip
    navTabStripVersion = "1.0.4"

    // mike penz lib versions
    mikepenzMaterialTypeface = "2.2.0.1@aar"
    mikepenzAboutLib = "5.7.1@aar"
    mikepenzMaterialDrawer = "5.3.6@aar"
    mikepenzFontAwesome = "4.6.0.3@aar"
    mikepenzOctIcons = "3.0.0.1@aar"
    mikepenzeItemAnims = "0.2.4@aar"

    // crashlytics
    crashlyticsVersion = "2.6.7@aar"

    // database & orm
    roomVersion = "1.0.0-alpha9-1"

    butterknifeVersion ="8.6.0"
    gsonVersion = "2.8.0"

    // Dependency Injection
    daggerVersion = "2.11"
    javaxAnnotationVersion="1.0"
    javaxInjectVersion="1"

    // reactive
    rxjava2Version = '2.1.1'
    rxandroidVersion = '2.0.1'
    rxKotlinVersion = "2.1.0"

    //network
    rx2FastAndroidNetVersion = "1.0.0"
    retrofitVersion = "2.3.0"
    retrofitAdapterVersion = "2.3.0"

    // anko version
    ankoVersion = "0.10.1"

    // evernote job version
    evernoteJobVersion = "1.1.11"

    // custom crash
    customActivityOnCrashVersion = "1.5.0"

    // debug database
    debugDatabaseVersion = "1.0.0"

    // glide
    glideVersion = "3.7.0"

    // cirlce image view
    circleImageViewVersion ="2.1.0"

    // app intro
    appIntroVersion = "4.1.0"

    // sweet alerts
    sweetAlertVersion = "1.3"

    // test version
    espressoVersion = "2.2.2"
    jUnitVersion = "4.12"
    mockitoVersion = "2.7.1"
    mockWebServerVersion = "3.6.0"
    robolectricVersion = "3.3.2"
    testRunnerVersion = "0.5"
    espressoContribVersion = "2.0"
    assertJVersion = "3.6.2"
    spekVersion = "1.1.2"
    mockitoKotlinVersion = "1.4.0"
    hamcrestVersion = "1.3"
    spekJunitEngVersion = "1.1.2"
}


/**
 * Gets the service account email gradle.properties file, Ensure that you have a
 * gradle.properties file in root project directory
 * */
static def getMovieReelServiceAccountKey() {
    try {
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("MOVIE_REEL_SERVICE_ACCOUNT_EMAIL")
    } catch (Exception ignored) {
        return ""
    }
}