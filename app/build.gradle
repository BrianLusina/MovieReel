apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'
apply plugin: "io.fabric"
apply plugin: "signing"
apply from: "../jacoco.gradle"
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.triplet.play'

import com.android.build.OutputFile

android {
    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = rootProject.ext.serviceAccountEmail
            jsonFile = rootProject.ext.pJsonKeyFile
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.moviereel"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        ndk {
            abiFilters "armeabi-v7a", "x86", "mips", "x86_64", "armeabi", "arm64-v8a"
        }
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }

    dataBinding {
        enabled = false
    }

    productFlavors {

    }
    /**
     * The aapt tool may inflate PNG files that have already been compressed.
     * To prevent this, you can use the cruncherEnabled flag in Gradle to disable this
     * process for PNG files:
     * */
    aaptOptions {
        cruncherEnabled = false
    }

    splits {
        abi {
            // Enables building multiple APKs per ABI.
            enable rootProject.ext.enableSeparateBuildPerCPUArchitecture
            universalApk rootProject.ext.enableUniversalApk

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi", "armeabi-v7a", "arm64-v8a", "mips", "x86", "x86_64"
        }
    }

    signingConfigs {
        release {
            keyAlias rootProject.ext.keystoreProperties['keyAlias']
            keyPassword rootProject.ext.keystoreProperties['keyPassword']
            storeFile rootProject.file(rootProject.ext.keystoreProperties['storeFile'])
            storePassword rootProject.ext.keystoreProperties['storePassword']
        }
    }

    // configurations for deployment
    play {
        track = "production"
        untrackOld = true // will untrack 'alpha' while upload to 'beta'
        errorOnSizeLimit = false
        uploadImages = true
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            resValue "string", "app_name", "Movie Reel"
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            applicationIdSuffix ".debug"
            testCoverageEnabled true
            resValue "string", "app_name", "Movie Reel-Dev"
            resValue("string", "PORT_NUMBER", "8081")
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    buildTypes.each {
        it.buildConfigField "String", "MOVIE_DB_KEY", MovieDbKey
        it.buildConfigField "String", "IMAGE_BASE_URL", IMAGE_BASE_URL
        it.buildConfigField "String", "IMAGE_SECURE_BASE_URL", IMAGE_SECURE_BASE_URL
        it.buildConfigField "String", "BASE_URL", "\"https://api.themoviedb.org/3/\""
    }

    packagingOptions {
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/DEPENDENCIES.txt"
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/dependencies.txt"
        exclude "META-INF/LICENSE"
        exclude "META-INF/license.txt"
        exclude "META-INF/LGPL2.1"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/NOTICE"
        exclude "META-INF/notice.txt"
    }

    configurations.all {
        resolutionStrategy {
            force "com.android.support:support-annotations:" + rootProject.ext.supportLibVersion
        }
    }

    // this enables the modularizing of application resources
    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin"
            res.srcDirs = [
                    "src/main/res/layouts/feature_main",
                    "src/main/res/layouts/feature_movie",
                    "src/main/res/layouts/feature_series",
                    "src/main/res/layouts/feature_cast",
                    "src/main/res/layouts/feature_review",
                    "src/main/res/layouts/feature_splash",
                    "src/main/res/layouts/feature_error",
                    "src/main/res/layouts/feature_details",
                    "src/main/res/layouts/components",
                    "src/main/res/layouts/common",
                    "src/main/res/layouts",
                    "src/main/res"
            ]
        }

        androidTest {
            java.srcDirs += "src/androidTest/kotlin"
        }

        test {
            java.srcDirs += "src/test/kotlin"
        }
    }

    lintOptions {
        quiet true         // set to true to turn off analysis progress reporting by lint
        abortOnError false        // if true, stop the gradle build if errors are found
        ignoreWarnings true        // if true, only report errors
    }

    // For each APK output variant, override versionCode with a combination of
    // ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
    // is equal to defaultConfig.versionCode. If you configure product flavors that
    // define their own versionCode, variant.versionCode uses that value instead.
    // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
    applicationVariants.all { variant ->

        // Assigns a different version code for each output APK
        // other than the universal APK.
        variant.outputs.all { output ->
            // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
            // Determines the ABI for this variant and returns the mapped value.
            def baseAbiVersionCode = rootProject.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
//            def baseDensityCodes = rootProject.ext.densityCodes.get(output.getFilter(
//                    OutputFile.DENSITY))

            // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
            // the following code does not override the version code for universal APKs.
            // However, because we want universal APKs to have the lowest version code,
            // this outcome is desirable.
            if (baseAbiVersionCode != null) {
                // Assigns the new version code to versionCodeOverride, which changes the version code
                // for only the output APK, not for the variant itself. Skipping this step simply
                // causes Gradle to use the value of variant.versionCode for the APK.
                output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
            } else {
                // this will make sure universal apks have the lowest version code
                output.versionCodeOverride = variant.versionCode * 1000

                // Filter is null for universal APKs.
                // this will be used when distributing universal APK to crashlytics
//                tasks.findAll {
//                    it.name.startsWith("crashlyticsUploadDistribution${variant.name.capitalize()}")
//                }.each {
//                    it.doFirst {
//                        rootProject.ext.betaDistributionApkFilePath = output.outputFile.absolutePath
//                    }
//                }
            }
        }
    }

    compileOptions.incremental = false
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Android support libraries
    implementation "com.android.support:support-v4:$supportLibVersion"
    implementation "com.android.support:cardview-v7:$supportLibVersion"
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibVersion"
    implementation "com.android.support:support-vector-drawable:$supportLibVersion"
    implementation "com.android.support:support-annotations:$supportLibVersion"
    implementation "com.android.support:palette-v7:$supportLibVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // ***************** database ORM ******************************
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"

    // navigation tab strip
    implementation "com.github.devlight.navigationtabstrip:navigationtabstrip:$navTabStripVersion"

    //material drawer library
    implementation("com.mikepenz:materialdrawer:$mikepenzMaterialDrawer") {
        transitive = true
    }

    // https://github.com/mikepenz/AboutLibraries
    implementation("com.mikepenz:aboutlibraries:$mikepenzAboutLib") {
        transitive = true
        exclude module: "fastadapter"
    }

    implementation "com.mikepenz:google-material-typeface:$mikepenzMaterialTypeface"
    implementation "com.mikepenz:fontawesome-typeface:$mikepenzFontAwesome"
    implementation "com.mikepenz:octicons-typeface:$mikepenzOctIcons"
    implementation "com.mikepenz:itemanimators:$mikepenzeItemAnims"

    /*Android job to schedule tasks to run.*/
    implementation "com.evernote:android-job:$evernoteJobVersion"

    // network
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitAdapterVersion"

    //GSON, enable modification of Parcelable objects from JSON and back, parser
    implementation "com.google.code.gson:gson:$gsonVersion"

    // glide for loading images
    implementation "com.github.bumptech.glide:glide:$glideVersion"

    // round images
    implementation "de.hdodenhof:circleimageview:$circleImageViewVersion"

    // sweet alerts
    implementation "cn.pedant.sweetalert:library:$sweetAlertVersion"

    // app intro
    implementation "com.github.paolorotolo:appintro:$appIntroVersion"

    // crashlytics and error handling
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion") {
        transitive = true
    }

    // custom crash
    implementation "cat.ereza:customactivityoncrash:$customActivityOnCrashVersion"

    // Anko Commons
    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"

    // dependency injection
    implementation "com.google.dagger:dagger:$daggerVersion"
    compileOnly "javax.annotation:jsr250-api:1.0"
    // org.glassfish:javax.annotation:10.0-b28
    implementation "javax.inject:javax.inject:1"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // reactive
    implementation "io.reactivex.rxjava2:rxjava:$rxjava2Version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"

    // android debug database
    debugImplementation "com.amitshekhar.android:debug-db:$debugDatabaseVersion"

    //-----------------------TEST DEPENDENCIES-----------------------------------------------------

    // Instrumented tests
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$espressoContribVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"

    //Unit Tests
    //---------------TEST DEPENDENCIES--------------------

    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "org.jetbrains.spek:spek-api:$spekVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"

    // Fix for https://github.com/robolectric/robolectric/issues/2566
    testImplementation "org.khronos:opengl-api:gl1.1-android-2.1_r1"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
}


configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$supportLibVersion"
}
